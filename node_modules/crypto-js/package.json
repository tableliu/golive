{
  "_args": [
    [
      {
        "raw": "crypto-js@>=3.1.8",
        "scope": null,
        "escapedName": "crypto-js",
        "name": "crypto-js",
        "rawSpec": ">=3.1.8",
        "spec": ">=3.1.8",
        "type": "range"
      },
      "D:\\xampp2\\htdocs\\iip\\node_modules\\autobahn"
    ]
  ],
  "_from": "crypto-js@>=3.1.8",
  "_hasShrinkwrap": false,
  "_id": "crypto-js@4.0.0",
  "_location": "/crypto-js",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/crypto-js_4.0.0_1581508675479_0.0433805305729702"
  },
  "_npmUser": {
    "name": "evanvosberg",
    "email": "evanvosberg@urban.to"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "crypto-js@>=3.1.8",
    "scope": null,
    "escapedName": "crypto-js",
    "name": "crypto-js",
    "rawSpec": ">=3.1.8",
    "spec": ">=3.1.8",
    "type": "range"
  },
  "_requiredBy": [
    "/autobahn"
  ],
  "_resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.0.0.tgz",
  "_shasum": "2904ab2677a9d042856a2ea2ef80de92e4a36dcc",
  "_shrinkwrap": null,
  "_spec": "crypto-js@>=3.1.8",
  "_where": "D:\\xampp2\\htdocs\\iip\\node_modules\\autobahn",
  "author": {
    "name": "Evan Vosberg",
    "url": "http://github.com/evanvosberg"
  },
  "bugs": {
    "url": "https://github.com/brix/crypto-js/issues"
  },
  "dependencies": {},
  "description": "JavaScript library of crypto standards.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "2904ab2677a9d042856a2ea2ef80de92e4a36dcc",
    "tarball": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.0.0.tgz",
    "integrity": "sha512-bzHZN8Pn+gS7DQA6n+iUmBfl0hO5DJq++QP3U6uTucDtk/0iGpXd/Gg7CGR0p8tJhofJyaKoWBuJI4eAO00BBg==",
    "fileCount": 54,
    "unpackedSize": 434322,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQ+hDCRA9TVsSAnZWagAA9/UP/jbXwjmsosEUQWojrLA0\nlUUV+L+7AqOikCSp0+WcitD5idjEPAmOE3smvgOQfG+HP5kT8fYbEtPHh1z5\nLC87XruP1F/naPZmhT5VYJqPfl2YVwN6pJZWNBkZW4pX9B0ou6YMJwf0ML4r\nL1qvfV28Wc4BJ/gWBvcixQ4LcjSfF3v1cPltI4XdhMbUgEaNJ8cZx7TrXp/x\nCe/CbD1KkJXwI/sEnjiVLyPqjdd2vIw3sMjflVIB4Frz62tKC8cc1acBNExU\nhegxQk8F6WVIHNJlKV8OLSM18uD1EX0U5jIfQX6V7qrx38uJe4rE2AYH7Sr4\nWo+Ct4kmbwzyii43LFCvdzVp/1iEByzXXNsf07rktHxl8ozUHiXb4xEzoiCW\n89GkGBoNgzJsbUbRQw/AFXTS4nWDG8l6djxuVAVQBrOP5rmOrOX+/6XPR5TC\nx/dmfbj4ZbJ0KhlhB/ZXke4BAHClgwpPdi4aL84iOTZBzIZILTeyf7wTj/Yz\nJA40HQI4FRBz61fL8kdXCGi3NszWgb/iqDBbwklKAXmVmhDDgtD3l/O65cw2\nqY5PhjJpeMrcVO2uMw3NMxRUw5/OePurLb8yg0Af1GLjkx58/3dcsj3HtJiT\nJp5RwClSFCS4gFumZwruG3cu8cT9EvMRxEKtUTEWtMeTdBJdHhNGqWTpe9Vd\nblNM\r\n=rqQJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "31d00127a7c87066c51abe56e7b8be3a32141cae",
  "homepage": "http://github.com/brix/crypto-js",
  "keywords": [
    "security",
    "crypto",
    "Hash",
    "MD5",
    "SHA1",
    "SHA-1",
    "SHA256",
    "SHA-256",
    "RC4",
    "Rabbit",
    "AES",
    "DES",
    "PBKDF2",
    "HMAC",
    "OFB",
    "CFB",
    "CTR",
    "CBC",
    "Base64"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "evanvosberg",
      "email": "evanvosberg@urban.to"
    }
  ],
  "name": "crypto-js",
  "optionalDependencies": {},
  "readme": "# crypto-js [![Build Status](https://travis-ci.org/brix/crypto-js.svg?branch=develop)](https://travis-ci.org/brix/crypto-js)\n\nJavaScript library of crypto standards.\n\n## Node.js (Install)\n\nRequirements:\n\n- Node.js\n- npm (Node.js package manager)\n\n```bash\nnpm install crypto-js\n```\n\n### Usage\n\nES6 import for typical API call signing use case:\n\n```javascript\nimport sha256 from 'crypto-js/sha256';\nimport hmacSHA512 from 'crypto-js/hmac-sha512';\nimport Base64 from 'crypto-js/enc-base64';\n\nconst message, nonce, path, privateKey; // ...\nconst hashDigest = sha256(nonce + message);\nconst hmacDigest = Base64.stringify(hmacSHA512(path + hashDigest, privateKey));\n```\n\nModular include:\n\n```javascript\nvar AES = require(\"crypto-js/aes\");\nvar SHA256 = require(\"crypto-js/sha256\");\n...\nconsole.log(SHA256(\"Message\"));\n```\n\nIncluding all libraries, for access to extra methods:\n\n```javascript\nvar CryptoJS = require(\"crypto-js\");\nconsole.log(CryptoJS.HmacSHA1(\"Message\", \"Key\"));\n```\n\n## Client (browser)\n\nRequirements:\n\n- Node.js\n- Bower (package manager for frontend)\n\n```bash\nbower install crypto-js\n```\n\n### Usage\n\nModular include:\n\n```javascript\nrequire.config({\n    packages: [\n        {\n            name: 'crypto-js',\n            location: 'path-to/bower_components/crypto-js',\n            main: 'index'\n        }\n    ]\n});\n\nrequire([\"crypto-js/aes\", \"crypto-js/sha256\"], function (AES, SHA256) {\n    console.log(SHA256(\"Message\"));\n});\n```\n\nIncluding all libraries, for access to extra methods:\n\n```javascript\n// Above-mentioned will work or use this simple form\nrequire.config({\n    paths: {\n        'crypto-js': 'path-to/bower_components/crypto-js/crypto-js'\n    }\n});\n\nrequire([\"crypto-js\"], function (CryptoJS) {\n    console.log(CryptoJS.HmacSHA1(\"Message\", \"Key\"));\n});\n```\n\n### Usage without RequireJS\n\n```html\n<script type=\"text/javascript\" src=\"path-to/bower_components/crypto-js/crypto-js.js\"></script>\n<script type=\"text/javascript\">\n    var encrypted = CryptoJS.AES(...);\n    var encrypted = CryptoJS.SHA256(...);\n</script>\n```\n\n## API\n\nSee: https://cryptojs.gitbook.io/docs/\n\n### AES Encryption\n\n#### Plain text encryption\n\n```javascript\nvar CryptoJS = require(\"crypto-js\");\n\n// Encrypt\nvar ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123').toString();\n\n// Decrypt\nvar bytes  = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');\nvar originalText = bytes.toString(CryptoJS.enc.Utf8);\n\nconsole.log(originalText); // 'my message'\n```\n\n#### Object encryption\n\n```javascript\nvar CryptoJS = require(\"crypto-js\");\n\nvar data = [{id: 1}, {id: 2}]\n\n// Encrypt\nvar ciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), 'secret key 123').toString();\n\n// Decrypt\nvar bytes  = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');\nvar decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n\nconsole.log(decryptedData); // [{id: 1}, {id: 2}]\n```\n\n### List of modules\n\n\n- ```crypto-js/core```\n- ```crypto-js/x64-core```\n- ```crypto-js/lib-typedarrays```\n\n---\n\n- ```crypto-js/md5```\n- ```crypto-js/sha1```\n- ```crypto-js/sha256```\n- ```crypto-js/sha224```\n- ```crypto-js/sha512```\n- ```crypto-js/sha384```\n- ```crypto-js/sha3```\n- ```crypto-js/ripemd160```\n\n---\n\n- ```crypto-js/hmac-md5```\n- ```crypto-js/hmac-sha1```\n- ```crypto-js/hmac-sha256```\n- ```crypto-js/hmac-sha224```\n- ```crypto-js/hmac-sha512```\n- ```crypto-js/hmac-sha384```\n- ```crypto-js/hmac-sha3```\n- ```crypto-js/hmac-ripemd160```\n\n---\n\n- ```crypto-js/pbkdf2```\n\n---\n\n- ```crypto-js/aes```\n- ```crypto-js/tripledes```\n- ```crypto-js/rc4```\n- ```crypto-js/rabbit```\n- ```crypto-js/rabbit-legacy```\n- ```crypto-js/evpkdf```\n\n---\n\n- ```crypto-js/format-openssl```\n- ```crypto-js/format-hex```\n\n---\n\n- ```crypto-js/enc-latin1```\n- ```crypto-js/enc-utf8```\n- ```crypto-js/enc-hex```\n- ```crypto-js/enc-utf16```\n- ```crypto-js/enc-base64```\n\n---\n\n- ```crypto-js/mode-cfb```\n- ```crypto-js/mode-ctr```\n- ```crypto-js/mode-ctr-gladman```\n- ```crypto-js/mode-ofb```\n- ```crypto-js/mode-ecb```\n\n---\n\n- ```crypto-js/pad-pkcs7```\n- ```crypto-js/pad-ansix923```\n- ```crypto-js/pad-iso10126```\n- ```crypto-js/pad-iso97971```\n- ```crypto-js/pad-zeropadding```\n- ```crypto-js/pad-nopadding```\n\n\n## Release notes\n\n### 4.0.0\n\nThis is an update including breaking changes for some environments.\n\nIn this version `Math.random()` has been replaced by the random methods of the native crypto module.\n\nFor this reason CryptoJS might does not run in some JavaScript environments without native crypto module. Such as IE 10 or before or React Native.\n\n### 3.3.0\n\nRollback, `3.3.0` is the same as `3.1.9-1`.\n\nThe move of using native secure crypto module will be shifted to a new `4.x.x` version. As it is a breaking change the impact is too big for a minor release.\n\n### 3.2.1\n\nThe usage of the native crypto module has been fixed. The import and access of the native crypto module has been improved.\n\n### 3.2.0\n\nIn this version `Math.random()` has been replaced by the random methods of the native crypto module.\n\nFor this reason CryptoJS might does not run in some JavaScript environments without native crypto module. Such as IE 10 or before.\n\nIf it's absolute required to run CryptoJS in such an environment, stay with `3.1.x` version. Encrypting and decrypting stays compatible. But keep in mind `3.1.x` versions still use `Math.random()` which is cryptographically not secure, as it's not random enough. \n\nThis version came along with `CRITICAL` `BUG`. \n\nDO NOT USE THIS VERSION! Please, go for a newer version!\n\n### 3.1.x\n\nThe `3.1.x` are based on the original CryptoJS, wrapped in CommonJS modules.\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/brix/crypto-js.git"
  },
  "scripts": {},
  "version": "4.0.0"
}
